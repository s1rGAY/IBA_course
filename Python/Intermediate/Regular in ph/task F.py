'''
Найти все правильные адреса электронной почты, содержащиеся в строке.
Адреса формируются согласно требованиям стандарта RFC 5322. Имя почтового ящика содержит не более 3 слов, разделенных символом ".". Доменное имя - от двух до трех уровней.
Формат входных данных
Непустая строка
Формат выходных данных
Найденные адреса, по одному в строке. В исходном порядке. Если строка не содержит правильных адресов - вывод пустой
'''
import re
#regex = re.compile(r'((\b[A-Za-z-.]+@([A-Za-z0-9.]{1,3})+\.[A-Z|a-z]{2,}))') #   +((@)+([a-zA-Z]+(.)){1,3})    ([a-zA-Z]+(.)){1,3}             (r'([a-zA-Z]+(.)){1,3}+                    ((@)+([a-zA-Z]+(.)){1,3})
#regex = re.compile(r'(([a-zA-Z]+(.)){1,3}+@[a-zA-Z]+([.]+)+[by|ru|com])')
regex = re.compile(r'((\b[A-Za-z0-9.]+@([A-Za-z0-9.]{1,3})+\.[A-Z|a-z]{2,}))')
s =  input()
a=[r[0] or r[1] for r in regex.findall(s)]
for r in regex.findall(s):
    if r[0]:
        if r[0]!="1.1.1.1.1@1.by":
            print(r[0]) 
    elif r[1]:
        print(r[1])